Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 3: Token <INT> Lexeme int found
type_specifier : INT
Line# 3: Token <ID> Lexeme main found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <ID> Lexeme a found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 4: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 5: Token <ID> Lexeme printLn found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <ID> Lexeme a found
Line# 5: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme x found
Line# 7: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 8: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 10: Token <IF> Lexeme if found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme x found
Line# 10: Token <RELOP> Lexeme == found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 10: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 10: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 10: Token <LCURL> Lexeme { found
Line# 11: Token <ID> Lexeme x found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 11: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 11: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	ScopeTable# 2
	12--> <x,ID> 
	ScopeTable# 1
	98--> <a,ID> 
	99--> <b,ID> 
statement : compound_statement
Line# 13: Token <ELSE> Lexeme else found
Line# 13: Token <LCURL> Lexeme { found
Line# 14: Token <ID> Lexeme x found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 14: Token <CONST_INT> Lexeme 20 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 14: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	ScopeTable# 2
	12--> <x,ID> 
	ScopeTable# 1
	98--> <a,ID> 
	99--> <b,ID> 
statement : compound_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 16: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	12--> <x,ID> 
	ScopeTable# 1
	98--> <a,ID> 
	99--> <b,ID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines: 16
Total Errors: 0
